// GIT COMMANDS ✅


// Fetching changes from a remote repository
git fetch REMOTE-NAME
# Fetches updates made to a remote repository

// Merging changes into your local branch
git merge REMOTE-NAME/BRANCH-NAME
# Merges updates made online with your local work

// Pulling changes from a remote repository
git pull REMOTE-NAME BRANCH-NAME

git init // initializing the repo
git remote add origin https://github.com/sutanu03/...git // connecting local repo with github repo
git remote -v // to verify the remote url is correct
git status // checking status
git add .  // adding all files to github repo
git commit -m "first commit" // commit after changing 
git pull --rebase origin main // to rebase
git push origin main // push the changes that you have made to main branch of the repo

// To discard unstaged changes to a file permanently:

git checkout -- MyApp/mylib

// To discard changes and save them for later use

git stash






// HTML NOTES ✅

1. make html file // index.html 
2. make boilerplate code // dummy code for html (html:5) 
3. understand tags // <head> - here "head" is a tag
4. understand h1-h6 // h1(biggest heading) > h2 > h3 > h4 > h5 > h6(smallest)
5. understand live server // installed live server extention in vs code 
6. understand p // paragraph tag
7. understand br // break tag to break the line or print in the next line
8. understand image // use image in html using src = "image.img"
9. understand a // anchor tag to provide link using href = "https://www.google.com"
10. understand div // it a rectangle with full width but no height (height depends on it's children)
11. understand id (for id in style = #hello) // creating names for specific reason(id's name can't be repeated)
12. understand class (for class in style = .a) // class's name can be repeated






// CSS NOTES ✅ 

1. understanding css // style
2. making css file // style.css
3. understanding linking // linking css file within html code using link:css
4. css boilerplate // * {margin: 0; padding: 0; box-sizing: border-box;} || html, body {width: 100%; height: 100%;}
5. understanding css writing way // targeting elements by #id{..} or .class{...} or h1{...}/p{...}/h2{...}...anything{...}
6. understand width, height // making shapes using width and height
7. understanding units, px and % // when we want for expl: full(100%)/half(50%)/quarter(25%) etc. we use % but when we    want the exact position we use pixels(100px)
8. understand margin padding // margin is the space between two elements(margin:10px means margin between div in 10px from every side) and padding is something like space within one single element
9. understanding background image and things related to it // #backgroundImage { width: 100%; height: 100%; background-image: url(...); background-size: cover; background-position: center; }
10. understand position absolute // if we have two elements and one is up then we can see only upper one not the lower one
12. understand position relative // if we make anything absolute but want that in a particular box we use this
13. understanding flexbox // display flex means to move elements side by side in the same box // for width = justify content // for height = allign items






// JS - Basic ✅

1. var let const
2. hoitsing // variables can be used before made like in line no 4 - console.log(a); and in line no 5 - var a = 12; (only possible in js).
3. data types
4. conditionals
5. loops
6. functions // bar bar repeat karna
7. param arguments // parameter and arguments
8. Array // collection of data
9. Push pop shift unshift splice // push = last ele add, pop = last element remove, unshift = add ele at first. shift = remove from first
  [splice = remove values from anywhere in the array (arr.splice(2,3) = remove from only index 2 to index 4 / 3values from index 2] 
10. Objects // ek indivisual ki saari details ko hold karna that's an object , in a key value pair (ex: key = "age" , value = "24")
  // 1) blank obj
  var a = {};
  // 2) filled obj
  var a = {
      age: 24,
      name: "Sutanu",
      email: "sg@gmail.com",
      contact: 80456524145,
      kuchbolo: function () {}
      }
      a.name = "Sutanu Ghosal"
  // accessing value
  console.log(a.age);
  //output = 24;
  // here age, name, email, contact are properties but kuchbolo is also a property but it is called a method 
  // updating any property
    the name is now changed in the object from "Sutanu" to "Sutanu Ghosal"




// Advance - JavaScript ✅

js has two main versions -- es5(old) and es6(new)

// 1. diff b/w var let const
//  a. js has two main versions -- es5 & es6. es5 only had var (let and const added in es6)

//  b. var is function scoped where let and const is braces scoped

function abcd() {
  // for const it is printing only 1 and then showing error
  for (
    var i = 1;
    i < 10;
    i++ // for let, it is printing 1 to 9 then showing error
  ) {
    console.log(i);
  }
  console.log(i); // in other programming languages this is not allowed (i can't be used outside for loop) but in js it is possible
  // because the var is function scoped means it can be used anywhere within the parent function
  // in output it is printing 1 to 10
}
abcd();

// c. var adds itself to the window object but let,const doesn't adds
//    window is something where the features we use which is not existed in js

// window is a box of features provided by browser (such as alert, document, promt, console etc...)

// for example, we have a pen(js) and a paper. now we want to write something in the paper
// we can easily write it, bcz it a feature of the pen
// but if we want to find the mobile stand (mobile stand is not a feature of the pen),
// the pen went to a box(window) and find the mobile stand and give it to me
// though mobile stand is not a feature of a pen just like that js went to the window to take help and use that feature

var a = 12;

let b = 15;

const c = 20;

// in window of browser, it is only showing a = 12 (because of var) not b and c
// var add itself to the browser window object

// 2. Browser context api

// it has 3 main thing window(discuss earlier), stack, heap memory

// 3. Stack
// like a sequence wise data(plate in hotel(LIFO))

// 4. heap memory
// every variables or data which has to stored somewhere, that is named as heap memory
// for exp: for one calculation the intermediate data(not final answer) is stored in heap memory

// 5. Execution context
// it is a container where the function's code is executed and it's created whenever
// a function is called, it contains 3 things-- variables, functions and lexical environment.

function xy() {
  var x = 12;
  function def() {
    var y = 15;
  }
}

xy();

// in this example; execution context is that parent func i.e. function xy() where it can use var a and function def() but it can't use b;
// bcz var(scope upto nearest parent func) can be accessible by the parent function only
// so here, var b can't be use outside function def()

// 6. Lexical environment -- it is a kind of chart jisme likha hota hai ke aapka particular function ki cheejo ko access kar sakta hai and kinko nahi. mtlb it holds it's scope and scope chain.
// for exp : suppose we have 10 functions as nested, then the last one or the inside one func can access the values of the outside one. (this is scope chain)
// parent functions values can be accessed but not the children function values

// 7. How to copy reference values (spread operator)
// if we have an array for exp : var a = [1,2,3,4,5]; and we want to copy it like -- var b = a;
// then it is not copied, if we want to pop() any element from b, it will also be removed from a.
// that's where we use reference operator

var a = [1, 2, 3, 4, 5];
var b = [...a]; // copying values from a to b using [...a] (spread operator)

b.pop(); // now if we want to remove last value from b, it will only remove from b, not from a.

// we can also copy objects as well using spread operator
// for exp :
var obj = { name: "Sutanu" };
var copyObj = { ...obj };

// 8. Truthy and falsy
// truthy and falsy are different from true and false
// falsy values = 0, false, undefined, null, NaN(not a number), document.all
// truthy values =  every values except falsy

// 9. switch case
// just like other prog lang.
switch (a) {
  case 1:
    console.log(1);
    break;
  case 2:
    console.log(2);
    break;
  default:
    console.log("hello");
}

// 10. for-each for-in for-of do-while loops
// a. for-each -- works for array

var a = [1, 2, 3, 4, 5];

a.forEach(function (value) {
  console.log(val + 2); // printing every array elements with + 2
});

// b. for-in -- works for objects

var obj = {
  name: "Sutanu",
  age: 24,
  city: "Kolkata",
};

for (var key in obj) {
  console.log(key); // prints only name, age, city
  console.log(obj[key]); // prints Sutanu, 24, Kolkata
  console.log(key, obj[key]); // prints both name, age, city and Sutanu, 24, Kolkata
}

// c. do-while

var a = 12;

do {
  console.log(hello); // do while run even the condition false bcz while comes later
  a++;
} while (a < 15);

// d. for - of loop

// It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:

const cars = ["BMW", "Volvo", "Mini"];

let text = "";
for (let x of cars) {
  text += x;
}

// 11. callback functions
// it is also a function where  we can set when the function is called
// for exp:

// a part of async js
setTimeout(function () {
  console.log("called after 2 seconds");
}, 2000); // 2000 miliseconds = 2 seconds

// 12. First Class Functions
// we can use those functions as a value

function abcd(a) {
  a();
}
// here i use function as a value/variables
abcd(function () {
  console.log("hey");
});

// 13. how arrays are made behind the scenes, how can we make negative indexes array

// var a = [1,2,3]; --is not acctually an array, it is an object

// js converts array from objects like --

//from
var arr = [11, 22, 33];

//make negative index
arr[-1] = 2;
//to
arr = {
  0: 11,
  1: 22,
  2: 33,
  -1: 2
};


// we can know when we have array or objectPosition: 

//in console
Array.isArray([]) --> true // array

Array.isArray({}) --> false // object


// 14. how to delete object props 

var obj = {
  name: "Sutanu",
  age: 24,
  city: "Kolkata",
};

delete a.age; // deletes age from obj




// Advance JavaScript -- PART 2 ✅

/* METHOD =  ek function jo object ke andar ho, usse hum method kehte h */

// 1. Higher order function. 👍
// A function which accept a function in a parameter or return a function or both.

//imp : ForEach method always takes another function inside it, so, ForEach is a higher order function
// var arr = [1,2,3,4,5];
// arr.forEach(function(){}) // forEach is a higher order function

function abcd(val) {} // here abcd is a higher order function

abcd(function () {});

// 2. Constructor function. 👍
// jab aapke paas aisa koi mauka ho ke aapko ek jaisi properties waale bohot saare elements banaane hai us waqt aap constructor fnc use kaar skte ho.

// new keyword + constructor function = instance (one individual created by one constructor function)

function saanchaOfBiscuit(height) {
  this.width = 12;
  this.height = height;
  this.color = "brown";
  this.taste = "sugary";
}
// same bicuits with different heights
var biscuit1 = new saanchaOfBiscuit(22);
var biscuit2 = new saanchaOfBiscuit(24); // new instance = new biscuit

// 3. First class function. 👍
// we can use those functions as a value or va variable

function abcd(a) {
  a();
}
// here i use function as a value/variables
abcd(function () {
  console.log("hey");
});

// 4. new keyword 👍
// new matlab ek blank object banao
// new keyword always creates a blank object for the constructor function which is getting called just after new keyword.

// 5. iife (immediately invoked function expression). 👍
// iife hai function ko turant chalane ki kala, is tareeke se ki hum log koi private variable bana paaye.

(function () {
  var privateValue = 12;
})(); //----> this is iife (privateValue is not accesible from console/private variables)

// we can access the value of change the value using getter and setter
(function () {
  var privateValue = 12;
  return {
    getter: function () {
      console.log(privateValue);
    },
    setter: function (visibleVal) {
      privateValue = visibleVal;
    },
  };
})();

// 6. Prototype. 👍
// when we create a object (such as: var obj = {name:"Sutanu"}), there are some helper functions/methods(such as: hasOwnProperty(), .length() -- for arrays) provided by js, those functions/methods are the part of prototype

// 7. Prototypal Inheritance. 👍
// some property matches from parents, that is inheritance
// if we pass some features from parent to children via prototype is called prototypal inheritance.

var Human = {
  name: "Sutanu Ghosal",
  canFly: false,
  canTalk: true,
};

// some extra features for human sutanu
var ScubeCompanyEmployee = {
  solveQuestions: true,
  createWebsites: true,
};

ScubeCompanyEmployee.__proto__ = Human; // borrowed all properties from human to scubeCompanyEmployee

// 8. this calls apply bind 👍

// jab bhi koi cheej {} brackets ke andar nahi hoti to hum usse GLOBAL SCOPE kehte hai.
var s = 12;

// but here
function pqrs() {
  var s = 12; // here s is not GLOBAL, it is in pqrs's LOCAL SCOPE
}

// this is a keyword, whose value can be different in different places
/* this values -->
global => window
function => window
method => object // in any method, "this" keyword always refers to parent object
eventListener => that what is written before eventListener  
*/

// call apply bind (motive ek hai) => agar tumhaare paas koi function hai and koi object hai and tumhe function chalana hai aur by default jo "this" ki value window hai usse window na rakh kar point karwana hai kisi object ki taraf.
function abcd() {
  console.log(this.age);
}

var obj = { age: 24 };

abcd.call(obj); //call function
// now "this" value changed from "window" to 24.

// apply is kind of similar like call() but passes parameter/values as arrays

function abcd(val, val2, val3) {
  console.log(this, val, val2, val3);
}

var obj = { age: 24 };

abcd.call(obj, 1, 2, 3); // call function
// or
abcd.apply(obj, [1, 2, 3]); // apply function

// bind => do bind with object with function

function abcd() {
  console.log(this);
}

var obj = { age: 24 };

var bindedFnc = abcd.bind(obj); // binded

bindedFnc(); // calling function bindedFnc

// 9. pure & impure function 👍

function impureFunction(val) {
  return Math.random() * val;
}

var ans1 = abcd(2);
var ans2 = abcd(2); // ans2 and ans1 are different, so abcd is a impure function

// pure function => aisa function jo ki same input dene par same output de har baar, aur wo global variable ki value change na kaare.

function pureFunction(a, b) {
  return a * b;
}

var ans1 = abcd(1, 2);
var ans2 = abcd(1, 2); // doesn't matter how many times the function gets called, it returns same value, that is why this is a pure function

// closures
 

// Prerequisite of JS before learn REACT JS ✅

1. Array
2. Arrow function = () => {}
3. Objects
4. Map -- looks like for each loop but actually not (it makes a copy of original array and then performs some operations)
5. Filter -- same like map but 
6. Reduce 
7. (VVI) Destructuring
8. Mutability and immutability

// Topics to be good at React ✅
1. Component --> every small div like things are component or we can say if we need anything that is repeating we make compponent
2. Data usage - JSX - Data flow --> flows data from top to bottom / from parent to child
3. Props --> use to flow data or functions from parent to child
4. State - useState --> State = Data (to change anything in data, change the state/main data) using useState function
5. Effect - useEffect --> performs once the website is loaded (for exp- we want to use animation of some component or state wise change)

// Some notes of React ✨
1. Everything big or repeated are components
2. Components can have data
3. Data is called State/ Data stored in State(like variables)
4. change state and component will recalculate
5. Props for sending data from parent to child component
6. Effect runs when DOM is loaded
7. JSX looks like HTML but not (in html--> <h1>2+2</h1> = 2+2, in JSX--> <h1>{2+2}</h1> = 4)



